{"ast":null,"code":"var _jsxFileName = \"/home/venkatesh/Study/ead/servicex/client/src/components/pages/Map.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect } from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport Marker from \"./Marker\";\nimport './Map.css';\nimport fetchFakeData from '../../api/fetchFakeData';\nimport ReactDOM from 'react-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nmapboxgl.accessToken = 'pk.eyJ1Ijoia2FrYXNoaTI1MTAiLCJhIjoiY2ttb2xld2NxMGkzdzJwbGhpcXNkMmptMiJ9.--t9iJ_IT1Vz6XLBnNcVhA';\n\nconst Map = () => {\n  _s();\n\n  const mapContainerRef = useRef(null); // initialize map when component mounts\n\n  useEffect(() => {\n    const map = new mapboxgl.Map({\n      container: mapContainerRef.current,\n      // See style options here: https://docs.mapbox.com/api/maps/#styles\n      style: 'mapbox://styles/mapbox/streets-v11',\n      center: [-104.9876, 39.7405],\n      zoom: 12.5\n    });\n    map.on('load', () => {\n      // add the data source for new a feature collection with no features\n      map.addSource('random-points-data', {\n        type: 'geojson',\n        data: {\n          type: 'FeatureCollection',\n          features: []\n        }\n      }); // now add the layer, and reference the data source above by name\n\n      map.addLayer({\n        id: 'random-points-layer',\n        source: 'random-points-data',\n        type: 'symbol',\n        layout: {\n          // full list of icons here: https://labs.mapbox.com/maki-icons\n          'icon-image': 'bakery-15',\n          // this will put little croissants on our map\n          'icon-padding': 0,\n          'icon-allow-overlap': true\n        }\n      });\n    });\n    map.on('moveend', async () => {\n      // get center coordinates\n      const {\n        lng,\n        lat\n      } = map.getCenter(); // fetch new data\n\n      const results = await fetchFakeData({\n        longitude: lng,\n        latitude: lat\n      }); // iterate through the feature collection and append marker to the map for each feature\n\n      results.features.forEach(result => {\n        const {\n          id,\n          geometry\n        } = result; // create marker node\n\n        const markerNode = document.createElement('div');\n        ReactDOM.render( /*#__PURE__*/_jsxDEV(Marker, {\n          id: id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 27\n        }, this), markerNode); // add marker to map\n\n        new mapboxgl.Marker(markerNode).setLngLat(geometry.coordinates).addTo(map);\n      });\n    }); // clean up on unmount\n\n    return () => map.remove();\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-container\",\n    ref: mapContainerRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Map, \"JDsoK+vCj+KIdyRFXV6E+3zLK1c=\");\n\n_c = Map;\nexport default Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["/home/venkatesh/Study/ead/servicex/client/src/components/pages/Map.js"],"names":["React","useRef","useEffect","mapboxgl","Marker","fetchFakeData","ReactDOM","accessToken","Map","mapContainerRef","map","container","current","style","center","zoom","on","addSource","type","data","features","addLayer","id","source","layout","lng","lat","getCenter","results","longitude","latitude","forEach","result","geometry","markerNode","document","createElement","render","setLngLat","coordinates","addTo","remove"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,QAAyC,OAAzC;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAO,WAAP;AACA,OAAOC,aAAP,MAA0B,yBAA1B;AACA,OAAOC,QAAP,MAAqB,WAArB;;AACAH,QAAQ,CAACI,WAAT,GAAuB,gGAAvB;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAMC,eAAe,GAAGR,MAAM,CAAC,IAAD,CAA9B,CADgB,CAGhB;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMQ,GAAG,GAAG,IAAIP,QAAQ,CAACK,GAAb,CAAiB;AAC3BG,MAAAA,SAAS,EAAEF,eAAe,CAACG,OADA;AAE3B;AACAC,MAAAA,KAAK,EAAE,oCAHoB;AAI3BC,MAAAA,MAAM,EAAE,CAAC,CAAC,QAAF,EAAY,OAAZ,CAJmB;AAK3BC,MAAAA,IAAI,EAAE;AALqB,KAAjB,CAAZ;AAQAL,IAAAA,GAAG,CAACM,EAAJ,CAAO,MAAP,EAAe,MAAM;AACjB;AACAN,MAAAA,GAAG,CAACO,SAAJ,CAAc,oBAAd,EAAoC;AAClCC,QAAAA,IAAI,EAAE,SAD4B;AAElCC,QAAAA,IAAI,EAAE;AACJD,UAAAA,IAAI,EAAE,mBADF;AAEJE,UAAAA,QAAQ,EAAE;AAFN;AAF4B,OAApC,EAFiB,CASjB;;AACAV,MAAAA,GAAG,CAACW,QAAJ,CAAa;AACXC,QAAAA,EAAE,EAAE,qBADO;AAEXC,QAAAA,MAAM,EAAE,oBAFG;AAGXL,QAAAA,IAAI,EAAE,QAHK;AAIXM,QAAAA,MAAM,EAAE;AACN;AACA,wBAAc,WAFR;AAEqB;AAC3B,0BAAgB,CAHV;AAIN,gCAAsB;AAJhB;AAJG,OAAb;AAWD,KArBH;AAsBEd,IAAAA,GAAG,CAACM,EAAJ,CAAO,SAAP,EAAkB,YAAY;AAC5B;AACA,YAAM;AAAES,QAAAA,GAAF;AAAOC,QAAAA;AAAP,UAAehB,GAAG,CAACiB,SAAJ,EAArB,CAF4B,CAG5B;;AACA,YAAMC,OAAO,GAAG,MAAMvB,aAAa,CAAC;AAAEwB,QAAAA,SAAS,EAAEJ,GAAb;AAAkBK,QAAAA,QAAQ,EAAEJ;AAA5B,OAAD,CAAnC,CAJ4B,CAK5B;;AACAE,MAAAA,OAAO,CAACR,QAAR,CAAiBW,OAAjB,CAAyBC,MAAM,IAAI;AACjC,cAAM;AAAEV,UAAAA,EAAF;AAAMW,UAAAA;AAAN,YAAmBD,MAAzB,CADiC,CAEjC;;AACA,cAAME,UAAU,GAAGC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAnB;AACA9B,QAAAA,QAAQ,CAAC+B,MAAT,eAAgB,QAAC,MAAD;AAAQ,UAAA,EAAE,EAAEf;AAAZ;AAAA;AAAA;AAAA;AAAA,gBAAhB,EAAoCY,UAApC,EAJiC,CAKjC;;AACA,YAAI/B,QAAQ,CAACC,MAAb,CAAoB8B,UAApB,EACGI,SADH,CACaL,QAAQ,CAACM,WADtB,EAEGC,KAFH,CAES9B,GAFT;AAGD,OATD;AAUD,KAhBD,EA/BY,CAiDd;;AACA,WAAO,MAAMA,GAAG,CAAC+B,MAAJ,EAAb;AACD,GAnDQ,EAmDN,EAnDM,CAAT,CAJgB,CAuDR;;AAER,sBAAO;AAAK,IAAA,SAAS,EAAC,eAAf;AAA+B,IAAA,GAAG,EAAEhC;AAApC;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CA1DD;;GAAMD,G;;KAAAA,G;AA4DN,eAAeA,GAAf","sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport Marker from \"./Marker\"\nimport './Map.css';\nimport fetchFakeData from '../../api/fetchFakeData'\nimport ReactDOM from 'react-dom';\nmapboxgl.accessToken = 'pk.eyJ1Ijoia2FrYXNoaTI1MTAiLCJhIjoiY2ttb2xld2NxMGkzdzJwbGhpcXNkMmptMiJ9.--t9iJ_IT1Vz6XLBnNcVhA';\n\nconst Map = () => {\n  const mapContainerRef = useRef(null);\n\n  // initialize map when component mounts\n  useEffect(() => {\n    const map = new mapboxgl.Map({\n      container: mapContainerRef.current,\n      // See style options here: https://docs.mapbox.com/api/maps/#styles\n      style: 'mapbox://styles/mapbox/streets-v11',\n      center: [-104.9876, 39.7405],\n      zoom: 12.5,\n      \n    });\n    map.on('load', () => {\n        // add the data source for new a feature collection with no features\n        map.addSource('random-points-data', {\n          type: 'geojson',\n          data: {\n            type: 'FeatureCollection',\n            features: [],\n          },\n        });\n        // now add the layer, and reference the data source above by name\n        map.addLayer({\n          id: 'random-points-layer',\n          source: 'random-points-data',\n          type: 'symbol',\n          layout: {\n            // full list of icons here: https://labs.mapbox.com/maki-icons\n            'icon-image': 'bakery-15', // this will put little croissants on our map\n            'icon-padding': 0,\n            'icon-allow-overlap': true,\n          },\n        });\n      });\n      map.on('moveend', async () => {\n        // get center coordinates\n        const { lng, lat } = map.getCenter();\n        // fetch new data\n        const results = await fetchFakeData({ longitude: lng, latitude: lat });\n        // iterate through the feature collection and append marker to the map for each feature\n        results.features.forEach(result => {\n          const { id, geometry } = result;\n          // create marker node\n          const markerNode = document.createElement('div');\n          ReactDOM.render(<Marker id={id} />, markerNode);\n          // add marker to map\n          new mapboxgl.Marker(markerNode)\n            .setLngLat(geometry.coordinates)\n            .addTo(map);\n        });\n      });\n\n    // clean up on unmount\n    return () => map.remove();\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return <div className=\"map-container\" ref={mapContainerRef} />;\n};\n\nexport default Map;"]},"metadata":{},"sourceType":"module"}