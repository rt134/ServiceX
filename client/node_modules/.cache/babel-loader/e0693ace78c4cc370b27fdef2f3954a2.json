{"ast":null,"code":"/* src/api/fetchFakeData.js */\n\n/**\n * A complete Coordinate Pair consisting of a latitude and longitude\n * @typedef {Object} CoordinatePair\n * @property {number} longitude - longitude coordinate\n * @property {number} latitude - latitude coordinate\n */\n\n/**\n * Generates a GeoJSON FeatureCollection of random points based on\n * the center coordinates passed in.\n * @param {CoordinatePair} centerCoordinates - the {@link CoordinatePair} for the map center\n * @return {results} GeoJSON FeatureCollection\n */\nconst fetchFakeData = centerCoordinates => {\n  const newFeaturesList = [];\n\n  for (let i = 0; i < 20; i++) {\n    const id = i;\n    const {\n      longitude,\n      latitude\n    } = getRandomCoordinate(centerCoordinates);\n    newFeaturesList.push({\n      type: 'Feature',\n      geometry: {\n        type: 'Point',\n        coordinates: [longitude, latitude]\n      },\n      properties: {\n        id,\n        name: `Random Point #${id}`,\n        description: `description for Random Point #${id}`\n      }\n    });\n  }\n\n  return Promise.resolve({\n    type: 'FeatureCollection',\n    features: newFeaturesList\n  });\n};\n/**\n * Generates a random point within 0.025 radius of map center coordinates.\n * @param {CoordinatePair} centerCoordinates - the {@link CoordinatePair} for the map center\n * @return {CoordinatePair} randomly generated coordinate pair\n */\n\n\nconst getRandomCoordinate = ({\n  longitude: centerLon,\n  latitude: centerLat\n}) => {\n  const r = 0.025 * Math.sqrt(Math.random());\n  const theta = Math.random() * 2 * Math.PI;\n  const latitude = centerLat + r * Math.cos(theta);\n  const longitude = centerLon + r * Math.sin(theta);\n  return {\n    longitude,\n    latitude\n  };\n};\n\nexport default fetchFakeData;","map":{"version":3,"sources":["/home/venkatesh/Study/ead/servicex/client/src/api/fetchFakeData.js"],"names":["fetchFakeData","centerCoordinates","newFeaturesList","i","id","longitude","latitude","getRandomCoordinate","push","type","geometry","coordinates","properties","name","description","Promise","resolve","features","centerLon","centerLat","r","Math","sqrt","random","theta","PI","cos","sin"],"mappings":"AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACC,MAAMA,aAAa,GAAGC,iBAAiB,IAAI;AACxC,QAAMC,eAAe,GAAG,EAAxB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3B,UAAMC,EAAE,GAAGD,CAAX;AACA,UAAM;AAAEE,MAAAA,SAAF;AAAaC,MAAAA;AAAb,QAA0BC,mBAAmB,CAACN,iBAAD,CAAnD;AACAC,IAAAA,eAAe,CAACM,IAAhB,CAAqB;AACnBC,MAAAA,IAAI,EAAE,SADa;AAEnBC,MAAAA,QAAQ,EAAE;AACRD,QAAAA,IAAI,EAAE,OADE;AAERE,QAAAA,WAAW,EAAE,CAACN,SAAD,EAAYC,QAAZ;AAFL,OAFS;AAMnBM,MAAAA,UAAU,EAAE;AACVR,QAAAA,EADU;AAEVS,QAAAA,IAAI,EAAG,iBAAgBT,EAAG,EAFhB;AAGVU,QAAAA,WAAW,EAAG,iCAAgCV,EAAG;AAHvC;AANO,KAArB;AAYD;;AAED,SAAOW,OAAO,CAACC,OAAR,CAAgB;AACrBP,IAAAA,IAAI,EAAE,mBADe;AAErBQ,IAAAA,QAAQ,EAAEf;AAFW,GAAhB,CAAP;AAID,CAvBF;AAyBC;AACF;AACA;AACA;AACA;;;AACE,MAAMK,mBAAmB,GAAG,CAAC;AAAEF,EAAAA,SAAS,EAAEa,SAAb;AAAwBZ,EAAAA,QAAQ,EAAEa;AAAlC,CAAD,KAAmD;AAC7E,QAAMC,CAAC,GAAG,QAAQC,IAAI,CAACC,IAAL,CAAUD,IAAI,CAACE,MAAL,EAAV,CAAlB;AACA,QAAMC,KAAK,GAAGH,IAAI,CAACE,MAAL,KAAgB,CAAhB,GAAoBF,IAAI,CAACI,EAAvC;AACA,QAAMnB,QAAQ,GAAGa,SAAS,GAAGC,CAAC,GAAGC,IAAI,CAACK,GAAL,CAASF,KAAT,CAAjC;AACA,QAAMnB,SAAS,GAAGa,SAAS,GAAGE,CAAC,GAAGC,IAAI,CAACM,GAAL,CAASH,KAAT,CAAlC;AACA,SAAO;AAAEnB,IAAAA,SAAF;AAAaC,IAAAA;AAAb,GAAP;AACD,CAND;;AAQA,eAAeN,aAAf","sourcesContent":["/* src/api/fetchFakeData.js */\n/**\n * A complete Coordinate Pair consisting of a latitude and longitude\n * @typedef {Object} CoordinatePair\n * @property {number} longitude - longitude coordinate\n * @property {number} latitude - latitude coordinate\n */\n\n/**\n * Generates a GeoJSON FeatureCollection of random points based on\n * the center coordinates passed in.\n * @param {CoordinatePair} centerCoordinates - the {@link CoordinatePair} for the map center\n * @return {results} GeoJSON FeatureCollection\n */\n const fetchFakeData = centerCoordinates => {\n    const newFeaturesList = [];\n    for (let i = 0; i < 20; i++) {\n      const id = i;\n      const { longitude, latitude } = getRandomCoordinate(centerCoordinates);\n      newFeaturesList.push({\n        type: 'Feature',\n        geometry: {\n          type: 'Point',\n          coordinates: [longitude, latitude],\n        },\n        properties: {\n          id,\n          name: `Random Point #${id}`,\n          description: `description for Random Point #${id}`,\n        },\n      });\n    }\n  \n    return Promise.resolve({\n      type: 'FeatureCollection',\n      features: newFeaturesList,\n    });\n  };\n  \n  /**\n   * Generates a random point within 0.025 radius of map center coordinates.\n   * @param {CoordinatePair} centerCoordinates - the {@link CoordinatePair} for the map center\n   * @return {CoordinatePair} randomly generated coordinate pair\n   */\n  const getRandomCoordinate = ({ longitude: centerLon, latitude: centerLat }) => {\n    const r = 0.025 * Math.sqrt(Math.random());\n    const theta = Math.random() * 2 * Math.PI;\n    const latitude = centerLat + r * Math.cos(theta);\n    const longitude = centerLon + r * Math.sin(theta);\n    return { longitude, latitude };\n  };\n  \n  export default fetchFakeData;"]},"metadata":{},"sourceType":"module"}