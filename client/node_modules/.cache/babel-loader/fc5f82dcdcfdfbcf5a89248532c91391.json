{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { document } from '../utils/globals';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { useEffect, useState, useMemo } from 'react';\nimport mapboxgl from '../utils/mapboxgl';\nimport useMapControl, { mapControlDefaultProps, mapControlPropTypes } from './use-map-control';\nvar propTypes = Object.assign({}, mapControlPropTypes, {\n  className: PropTypes.string,\n  style: PropTypes.object,\n  container: PropTypes.object,\n  label: PropTypes.string\n});\nvar defaultProps = Object.assign({}, mapControlDefaultProps, {\n  className: '',\n  container: null,\n  label: 'Toggle fullscreen'\n});\n\nfunction FullscreenControl(props) {\n  var _useMapControl = useMapControl(props),\n      context = _useMapControl.context,\n      containerRef = _useMapControl.containerRef;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isFullscreen = _useState2[0],\n      setIsFullscreen = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      showButton = _useState4[0],\n      setShowButton = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      mapboxFullscreenControl = _useState6[0],\n      createMapboxFullscreenControl = _useState6[1];\n\n  useEffect(function () {\n    var container = props.container || context.container;\n    var control = new mapboxgl.FullscreenControl({\n      container: container\n    });\n    createMapboxFullscreenControl(control);\n    setShowButton(control._checkFullscreenSupport());\n\n    var onFullscreenChange = function onFullscreenChange() {\n      var nextState = !control._fullscreen;\n      control._fullscreen = nextState;\n      setIsFullscreen(nextState);\n    };\n\n    document.addEventListener(control._fullscreenchange, onFullscreenChange);\n    return function () {\n      document.removeEventListener(control._fullscreenchange, onFullscreenChange);\n    };\n  }, []);\n\n  var onClickFullscreen = function onClickFullscreen() {\n    if (mapboxFullscreenControl) {\n      mapboxFullscreenControl._onClickFullscreen();\n    }\n  };\n\n  var style = useMemo(function () {\n    return _objectSpread({\n      position: 'absolute'\n    }, props.style);\n  }, [props.style]);\n\n  if (!showButton) {\n    return null;\n  }\n\n  var className = props.className,\n      label = props.label;\n  var type = isFullscreen ? 'shrink' : 'fullscreen';\n  return React.createElement(\"div\", {\n    style: style,\n    className: className\n  }, React.createElement(\"div\", {\n    className: \"mapboxgl-ctrl mapboxgl-ctrl-group\",\n    ref: containerRef\n  }, React.createElement(\"button\", {\n    key: type,\n    className: \"mapboxgl-ctrl-icon mapboxgl-ctrl-\".concat(type),\n    type: \"button\",\n    title: label,\n    onClick: onClickFullscreen\n  }, React.createElement(\"span\", {\n    className: \"mapboxgl-ctrl-icon\",\n    \"aria-hidden\": \"true\"\n  }))));\n}\n\nFullscreenControl.propTypes = propTypes;\nFullscreenControl.defaultProps = defaultProps;\nexport default React.memo(FullscreenControl);","map":{"version":3,"sources":["../../../src/components/fullscreen-control.js"],"names":["propTypes","className","PropTypes","style","container","label","string","defaultProps","context","containerRef","useMapControl","isFullscreen","setIsFullscreen","useState","showButton","setShowButton","mapboxFullscreenControl","createMapboxFullscreenControl","useEffect","props","control","mapboxgl","onFullscreenChange","nextState","document","onClickFullscreen","useMemo","position","type","FullscreenControl","React"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 Uber Technologies, Inc.\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {document} from '../utils/globals';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport {useEffect, useState, useMemo} from 'react';\nimport mapboxgl from '../utils/mapboxgl';\n\nimport useMapControl, {mapControlDefaultProps, mapControlPropTypes} from './use-map-control';\n\nconst propTypes = Object.assign({}, mapControlPropTypes, {\n  // Custom className\n  className: PropTypes.string,\n  style: PropTypes.object,\n  /* eslint-disable max-len */\n  // `container` is the [compatible DOM element](https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen#Compatible_elements)\n  // which should be made full screen. By default, the map container element will be made full screen.\n  /* eslint-enable max-len */\n  container: PropTypes.object,\n  label: PropTypes.string\n});\n\nconst defaultProps = Object.assign({}, mapControlDefaultProps, {\n  className: '',\n  container: null,\n  label: 'Toggle fullscreen'\n});\n\nfunction FullscreenControl(props) {\n  const {context, containerRef} = useMapControl(props);\n  const [isFullscreen, setIsFullscreen] = useState(false);\n  const [showButton, setShowButton] = useState(false);\n  const [mapboxFullscreenControl, createMapboxFullscreenControl] = useState(null);\n\n  useEffect(() => {\n    const container = props.container || context.container;\n\n    const control = new mapboxgl.FullscreenControl({container});\n\n    createMapboxFullscreenControl(control);\n    setShowButton(control._checkFullscreenSupport());\n\n    const onFullscreenChange = () => {\n      const nextState = !control._fullscreen;\n      // this is a hack\n      // Mapbox use `_fullscreen` flag to toggle fullscreen mode\n      control._fullscreen = nextState;\n      setIsFullscreen(nextState);\n    };\n\n    document.addEventListener(control._fullscreenchange, onFullscreenChange);\n\n    return () => {\n      document.removeEventListener(control._fullscreenchange, onFullscreenChange);\n    };\n  }, []);\n\n  const onClickFullscreen = () => {\n    if (mapboxFullscreenControl) {\n      mapboxFullscreenControl._onClickFullscreen();\n    }\n  };\n\n  const style = useMemo(() => ({position: 'absolute', ...props.style}), [props.style]);\n\n  if (!showButton) {\n    return null;\n  }\n\n  const {className, label} = props;\n  const type = isFullscreen ? 'shrink' : 'fullscreen';\n\n  return (\n    <div style={style} className={className}>\n      <div className=\"mapboxgl-ctrl mapboxgl-ctrl-group\" ref={containerRef}>\n        <button\n          key={type}\n          className={`mapboxgl-ctrl-icon mapboxgl-ctrl-${type}`}\n          type=\"button\"\n          title={label}\n          onClick={onClickFullscreen}\n        >\n          <span className=\"mapboxgl-ctrl-icon\" aria-hidden=\"true\" />\n        </button>\n      </div>\n    </div>\n  );\n}\n\nFullscreenControl.propTypes = propTypes;\nFullscreenControl.defaultProps = defaultProps;\n\nexport default React.memo(FullscreenControl);\n"]},"metadata":{},"sourceType":"module"}